services:
  controller:
    container_name: controller
    build:
      context: .
      dockerfile: ./cmd/controller/Dockerfile
    ports:
      - "8080:8080"
    networks:
      - temp
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    tty: true
    stdin_open: true
    # Make sure the controller waits for the node image to be built
    depends_on:
      - node

  loadbalancer:
    container_name: loadbalancer
    build:
      context: .
      dockerfile: ./cmd/loadbalancer/Dockerfile
    ports:
      - "9001:9001"
    networks:
      - temp
    depends_on:
      - controller

  etcd:
    image: quay.io/coreos/etcd:v3.5.12
    container_name: etcd-1
    command:
      - etcd
      - --name=etcd-1
      - --initial-advertise-peer-urls=http://etcd:2380
      - --listen-peer-urls=http://0.0.0.0:2380
      - --advertise-client-urls=http://etcd:2379
      - --listen-client-urls=http://0.0.0.0:2379
      - --initial-cluster=etcd-1=http://etcd:2380
    ports:
      - "2379:2379"
    networks:
      - temp

  node:
    # The image name used by the controller
    image: ct_hw3-node:latest
    build:
      context: .
      dockerfile: ./cmd/node/Dockerfile
    # This service doesn't need to run on its own,
    # it just needs to be built. The controller will start node containers.
    # We remove the `profiles` key so it gets built automatically.

  client:
    # The image for our command-line client
    image: ct_hw3-client:latest
    build:
      context: .
      dockerfile: ./cmd/client/Dockerfile
    # We also remove the `profiles` key here.

networks:
  temp:
    name: ct_network
    driver: bridge